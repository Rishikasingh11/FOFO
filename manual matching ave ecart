[
    {
      "id": "3613012",
      "type": "CC F A",
      "reference": "3613012",
      "contrepartie": "70788432",
      "dateValeur": "28 Feb 2024",
      "montantAchat": "8.63 EUR N",
      "montantVendu": "15.00 NZD N",
      "coursClient": "1.7378180",
      "montantBaseAchat": "8.63",
      "montantBaseVendu": "15.00",
      "coursBase": "1.7378180",
      "etatDateImport": "27/03/24\n0 - \n[1827565]",
      "commentaire": null
    },
    {
      "id": "3613059",
      "type": "CC F A",
      "reference": "3613059",
      "contrepartie": "70788432",
      "dateValeur": "28 Feb 2024",
      "montantAchat": "84,380.21 GBP N",
      "montantVendu": "94,277.38 CHF",
      "coursClient": "1.1172926",
      "montantBaseAchat": "84,380.21",
      "montantBaseVendu": "94,277.38",
      "coursBase": "1.1172926",
      "etatDateImport": "27/03/24\n0 - \n[1827627]",
      "commentaire": "2024.06.20: QUITUS team advised: \"Team is still busy with the Java upgrade and multiple vulnerabilities till Sept\". Email TS: Tuesday, 11 June, 2024 11:30 AM"
    },
    {
      "id": "SC076523",
      "type": "TC F A",
      "reference": "3706694\nSC076523",
      "contrepartie": "",
      "dateValeur": "02 Sep 2024",
      "montantAchat": "2,850.12 EUR",
      "montantVendu": "2,400.92 GBP N",
      "coursClient": "0.8423938",
      "montantBaseAchat": "2,850.12",
      "montantBaseVendu": "2,400.92",
      "coursBase": "0.8423938",
      "etatDateImport": "03/09/24\n5 - \n[1907358]",
      "commentaire": "2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process"
    },
    {
      "id": "3706695",
      "type": "TT F A",
      "reference": "3706695",
      "contrepartie": "",
      "dateValeur": "02 Sep 2024",
      "montantAchat": "5,887,000.00 GBP N",
      "montantVendu": "6,988,418.01 EUR",
      "coursClient": "0.8423938",
      "montantBaseAchat": "5,887,000.00",
      "montantBaseVendu": "6,988,418.01",
      "coursBase": "0.8423938",
      "etatDateImport": "03/09/24\n0 - \n[1907365]",
      "commentaire": "2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process"
    },
    {
      "id": "3710039",
      "type": "CC F M",
      "reference": "3710039",
      "contrepartie": "70491515",
      "dateValeur": "11 Sep 2024",
      "montantAchat": "366.24 DKK N",
      "montantVendu": "49.08 EUR",
      "coursClient": "7.4621000",
      "montantBaseAchat": "366.24",
      "montantBaseVendu": "49.08",
      "coursBase": "7.4621000",
      "etatDateImport": "09/09/24\n5 - \n[1910243]",
      "commentaire": "2024.09.10: FO deal in VAL status..."
    },
    {
      "id": "3710040",
      "type": "CC F M",
      "reference": "3710040",
      "contrepartie": "70491515",
      "dateValeur": "11 Sep 2024",
      "montantAchat": "229.94 NOK N",
      "montantVendu": "19.22 EUR",
      "coursClient": "11.9658000",
      "montantBaseAchat": "229.94",
      "montantBaseVendu": "19.22",
      "coursBase": "11.9658000",
      "etatDateImport": "09/09/24\n5 - \n[1910129]",
      "commentaire": "2024.09.10: FO deal in VAL status..."
    },
    {
      "id": "CC149589",
      "type": "CC F A",
      "reference": "3712941\nCC149589",
      "contrepartie": "70788432",
      "dateValeur": "18 Sep 2024",
      "montantAchat": "4,499.44 EUR",
      "montantVendu": "5,000.00 USD N",
      "coursClient": "1.1112500",
      "montantBaseAchat": "4,499.44",
      "montantBaseVendu": "5,000.00",
      "coursBase": "1.1112500",
      "etatDateImport": "18/09/24\n5 - \n[1914715]",
      "commentaire": "2024.09.19: FO/BO FX induits..."
    },
    {
      "id": "B1000001",
      "type": "CC B A",
      "reference": "B1000001",
      "contrepartie": "80000001",
      "dateValeur": "01 Oct 2024",
      "montantAchat": "10,000.00 USD N",
      "montantVendu": "9,200.00 EUR",
      "coursClient": "0.9200000",
      "montantBaseAchat": "10,000.00",
      "montantBaseVendu": "9,200.00",
      "coursBase": "0.9200000",
      "etatDateImport": "01/10/24\n0 - \n[2000001]",
      "commentaire": "Back Office deal sample."
    },
    {
      "id": "B1000002",
      "type": "TT B M",
      "reference": "B1000002",
      "contrepartie": "80000002",
      "dateValeur": "02 Oct 2024",
      "montantAchat": "20,000.00 GBP",
      "montantVendu": "25,000.00 USD N",
      "coursClient": "1.2500000",
      "montantBaseAchat": "20,000.00",
      "montantBaseVendu": "25,000.00",
      "coursBase": "1.2500000",
      "etatDateImport": "02/10/24\n0 - \n[2000002]",
      "commentaire": "Back Office deal sample 2."
    },
    {
      "id": "F2000001",
      "type": "CC F A",
      "reference": "F2000001",
      "contrepartie": "90000001",
      "dateValeur": "10 Oct 2024",
      "montantAchat": "5,000.00 EUR",
      "montantVendu": "5,400.00 USD N",
      "coursClient": "1.0800000",
      "montantBaseAchat": "5,000.00",
      "montantBaseVendu": "5,400.00",
      "coursBase": "1.0800000",
      "etatDateImport": "10/10/24\n0 - \n[2100001]",
      "commentaire": "Front Office deal sample 1."
    },
    {
      "id": "F2000002",
      "type": "TT F M",
      "reference": "F2000002",
      "contrepartie": "90000002",
      "dateValeur": "11 Oct 2024",
      "montantAchat": "7,000.00 GBP N",
      "montantVendu": "8,900.00 USD",
      "coursClient": "1.271429",
      "montantBaseAchat": "7,000.00",
      "montantBaseVendu": "8,900.00",
      "coursBase": "1.271429",
      "etatDateImport": "11/10/24\n0 - \n[2100002]",
      "commentaire": "Front Office deal sample 2."
    },
    {
      "id": "B2000001",
      "type": "CC B M",
      "reference": "B2000001",
      "contrepartie": "91000001",
      "dateValeur": "12 Oct 2024",
      "montantAchat": "12,000.00 USD",
      "montantVendu": "11,000.00 EUR",
      "coursClient": "0.916667",
      "montantBaseAchat": "12,000.00",
      "montantBaseVendu": "11,000.00",
      "coursBase": "0.916667",
      "etatDateImport": "12/10/24\n0 - \n[2200001]",
      "commentaire": "Back Office deal sample 3."
    },
    {
      "id": "B2000002",
      "type": "TC B A",
      "reference": "B2000002",
      "contrepartie": "91000002",
      "dateValeur": "13 Oct 2024",
      "montantAchat": "15,000.00 EUR",
      "montantVendu": "16,500.00 USD N",
      "coursClient": "1.1000000",
      "montantBaseAchat": "15,000.00",
      "montantBaseVendu": "16,500.00",
      "coursBase": "1.1000000",
      "etatDateImport": "13/10/24\n0 - \n[2200002]",
      "commentaire": "Back Office deal sample 4."
    },
    {
      "id": "B2000003",
      "type": "TT B A",
      "reference": "B2000003",
      "contrepartie": "91000003",
      "dateValeur": "14 Oct 2024",
      "montantAchat": "18,000.00 GBP",
      "montantVendu": "22,000.00 USD N",
      "coursClient": "1.222222",
      "montantBaseAchat": "18,000.00",
      "montantBaseVendu": "22,000.00",
      "coursBase": "1.222222",
      "etatDateImport": "14/10/24\n0 - \n[2200003]",
      "commentaire": "Back Office deal sample 5."
    }
  ] 




import React, { useState, useMemo, useRef, useEffect } from 'react';
import { Container, Stack, Popover, OverlayTrigger } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';
import { AgGridReact } from 'ag-grid-react';
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import { ModuleRegistry } from 'ag-grid-community';
import { ClientSideRowModelModule, ColumnAutoSizeModule } from 'ag-grid-community';
import { QuestionCircleFill } from 'react-bootstrap-icons';

ModuleRegistry.registerModules([
    ClientSideRowModelModule,
    ColumnAutoSizeModule,
]);

// Helper: Parse amount, currency and optional N indicator from value like "8.63 EUR" or "15.00 NZD N"
const parseAmountParts = (val) => {
    if (!val || typeof val !== 'string') return { amount: '', currency: '', n: '' };
    const amountMatch = val.match(/[0-9][0-9\s.,]*/);
    const currencyMatch = val.match(/\b([A-Z]{3})\b/);
    const nMatch = /\bN\b/.test(val);
    const amount = amountMatch ? amountMatch[0].trim() : '';
    const currency = currencyMatch ? currencyMatch[1] : '';
    const n = nMatch ? 'N' : '';
    return { amount, currency, n };
};

const gridOptions = {
    getRowStyle: params => {
        if (params.data.isTotalRow) {
            return { 'background': '#d4edda', 'font-weight': 'bold', 'color': '#155724' };
        }
        if (params.node.rowIndex % 4 < 2) {
            return { 'background': '#f2f2f2' };
        } else {
            return { 'background': '#ffffff' };
        }
    },
};

const DealsTable = () => {
    const totalDeals = 28;
    const [dealsData, setDealsData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selectedDeal1, setSelectedDeal1] = useState(null);
    const [selectedDeals2, setSelectedDeals2] = useState([]);

    useEffect(() => {
        setLoading(true);
        fetch(process.env.PUBLIC_URL + '/dealsData.json')
            .then((res) => res.json())
            .then((data) => {
                setDealsData(data);
                setLoading(false);
            })
            .catch(() => setLoading(false));
    }, []);

    const handleCheckbox2Change = (deal) => {
        setSelectedDeals2(prev => {
            const isSelected = prev.find(d => d.id === deal.id);
            if (isSelected) {
                return prev.filter(d => d.id !== deal.id);
            } else {
                return [...prev, deal];
            }
        });
    };

    const calculateTotal2 = () => {
        if (selectedDeals2.length === 0) return null;
        
        const totals = selectedDeals2.reduce((acc, deal) => {
            const montantAchat = parseFloat(deal.montantAchat?.replace(/[^\d.,]/g, '').replace(',', '.')) || 0;
            const montantVendu = parseFloat(deal.montantVendu?.replace(/[^\d.,]/g, '').replace(',', '.')) || 0;
            const montantBaseAchat = parseFloat(deal.montantBaseAchat?.replace(/[^\d.,]/g, '').replace(',', '.')) || 0;
            const montantBaseVendu = parseFloat(deal.montantBaseVendu?.replace(/[^\d.,]/g, '').replace(',', '.')) || 0;
            
            return {
                montantAchat: acc.montantAchat + montantAchat,
                montantVendu: acc.montantVendu + montantVendu,
                montantBaseAchat: acc.montantBaseAchat + montantBaseAchat,
                montantBaseVendu: acc.montantBaseVendu + montantBaseVendu
            };
        }, { montantAchat: 0, montantVendu: 0, montantBaseAchat: 0, montantBaseVendu: 0 });
        
        return totals;
    };

    const expandedDealsData = useMemo(() => {
        if (!dealsData || dealsData.length === 0) return [];
        const rows = [];
        for (let i = 0; i < dealsData.length; i++) {
            rows.push({ ...dealsData[i], isCommentRow: false });
            rows.push({
                id: `${dealsData[i].id}-comment`,
                isCommentRow: true,
                commentaire: dealsData[i].commentaire,
                reference: dealsData[i].reference,
            });
        }
        return rows;
    }, [dealsData]);

    const columnDefs = useMemo(() => [
        {
            headerName: '',
            field: 'dealRadioButtons',
            minWidth: 80,
            flex: 0.4,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                if (params.data.isTotalRow) return null;
                
                const typeParts = (params.data.type || '').split(' ');
                const office = typeParts.find(part => part === 'F' || part === 'B');
                
                return (
                    <div style={{ display: 'flex', flexDirection: 'row', gap: '10px', alignItems: 'center', justifyContent: 'center', width: '100%' }}>
                        {office === 'F' && (
                            <label className="custom-radio-numbered" style={{ cursor: 'pointer' }}>
                                <input
                                    type="radio"
                                    name={`deal-radio-1`}
                                    value={1}
                                    checked={selectedDeal1 && selectedDeal1.id === params.data.id}
                                    onChange={() => setSelectedDeal1(params.data)}
                                    style={{ display: 'none' }}
                                />
                                <span className="custom-radio-circle">1</span>
                            </label>
                        )}
                        {office === 'B' && (
                            <label className="custom-checkbox-modern" style={{ cursor: 'pointer' }}>
                                <input
                                    type="checkbox"
                                    name={`deal-checkbox-2`}
                                    value={2}
                                    checked={selectedDeals2.find(d => d.id === params.data.id) !== undefined}
                                    onChange={() => handleCheckbox2Change(params.data)}
                                    style={{ display: 'none' }}
                                />
                                <span className={`custom-checkbox-box${selectedDeals2.find(d => d.id === params.data.id) ? ' checked' : ''}`}>
                                    <span className="custom-checkbox-number">2</span>
                                </span>
                            </label>
                        )}
                    </div>
                );
            },
        },
        {
            headerName: 'Type',
            field: 'type',
            minWidth: 100,
            flex: 1,
            cellClass: (params) =>
              params.data.isCommentRow ? 'comment-row' : 'ag-master-cell',
            colSpan: (params) => 1,
            cellRenderer: (params) => {
              if (params.data.isCommentRow) return null;
              const parts = (params.data.type || '').split(' ');
              return <span>{parts[0] || ''}</span>;
            },
        },
        {
            headerName: 'Office',
            field: 'office',
            minWidth: 100,
            flex: 1,
            cellClass: (params) => params.data.isCommentRow ? 'comment-row' : '',
            colSpan: (params) => 1,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                const parts = (params.data.type || '').split(' ');
                return <span>{parts.slice(1).join(' ')}</span>;
            },
        },
        {
            headerName: 'Reference',
            field: 'reference',
            minWidth: 100,
            flex: 1,
            cellClass: (params) => params.data.isCommentRow ? 'comment-row' : 'cell-pre-line',
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Contrepartie',
            field: 'contrepartie',
            minWidth: 120,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Date de Valeur',
            field: 'dateValeur',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        // Montant Achat split: amount, currency, N
        {
            headerName: 'Montant Achat',
            field: 'montantAchatAmount',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 12 : 1,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) {
                    return (
                        <span className="comment-text">
                            <strong>Commentaire:</strong> {params.data.commentaire || <span className="text-muted">Aucun commentaire</span>}
                        </span>
                    );
                }
                const { amount } = parseAmountParts(params.data.montantAchat);
                return amount;
            },
        },
        {
            headerName: '',
            field: 'montantAchatCurrency',
            minWidth: 80,
            flex: 0.6,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                const { currency } = parseAmountParts(params.data.montantAchat);
                return currency;
            },
        },
        {
            headerName: '',
            field: 'montantAchatN',
            minWidth: 50,
            flex: 0.3,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                const { n } = parseAmountParts(params.data.montantAchat);
                return n;
            },
        },
        // Montant Vendu split: amount, currency, N
        {
            headerName: 'Montant Vendu',
            field: 'montantVenduAmount',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                const { amount } = parseAmountParts(params.data.montantVendu);
                return amount;
            },
        },
        {
            headerName: '',
            field: 'montantVenduCurrency',
            minWidth: 80,
            flex: 0.6,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                const { currency } = parseAmountParts(params.data.montantVendu);
                return currency;
            },
        },
        {
            headerName: '',
            field: 'montantVenduN',
            minWidth: 50,
            flex: 0.3,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                const { n } = parseAmountParts(params.data.montantVendu);
                return n;
            },
        },
        {
            headerName: 'Cours client',
            field: 'coursClient',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Montant de base Achat',
            field: 'montantBaseAchat',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Montant de base Vendu',
            field: 'montantBaseVendu',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Cours base',
            field: 'coursBase',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: "Date d'import",
            field: 'etatDateImport',
            cellClass: 'cell-pre-line',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
    ], [selectedDeal1, selectedDeals2]);

    const defaultColDef = useMemo(() => ({
        sortable: false,
        filter: false,
        resizable: true,
        suppressSizeToFit: false,
        autoSize: true
    }), []);

    const autoGroupColumnDef = useMemo(() => ({
        minWidth: 100,
        flex: 1,
        suppressSizeToFit: false
    }), []);

    const gridRef = useRef();

    const popover = (
        <Popover id="popover" className="legend-popover">
            <Popover.Body className="px-3 pt-0">
                <ul>
                    <li>CC: Change comptant</li>
                    <li>TC: Change à terme - spot de couverture</li>
                    <li>TT: Change à terme - partie terme</li>
                    <li>SW: Swap de change - spot de couverture</li>
                    <li>GC: Ordre groupe - change comptant</li>
                    <li>GT: Ordre groupe - change à terme</li>
                    <li>TF: Transfert</li>
                    <li>N: Nominal saisie</li>
                </ul>
            </Popover.Body>
        </Popover>
    );

    const topGridRows = [
        selectedDeal1 ? { ...selectedDeal1, id: 'slot1', isControlRow: false } : {
            id: 'placeholder-1',
            type: '',
            reference: '',
            contrepartie: '',
            dateValeur: '',
            montantAchat: '',
            montantVendu: '<Sélectionner une ligne>',
            coursClient: '',
            montantBaseAchat: '',
            montantBaseVendu: '',
            coursBase: '',
            etatDateImport: '',
            isControlRow: false,
        },
        ...selectedDeals2.map((deal, index) => ({
            ...deal,
            id: `slot2-${index}`,
            isControlRow: false
        })),
        ...(selectedDeals2.length === 0 ? [{
            id: 'placeholder-2',
            type: '',
            reference: '',
            contrepartie: '',
            dateValeur: '',
            montantAchat: '',
            montantVendu: '<Sélectionner une ligne>',
            coursClient: '',
            montantBaseAchat: '',
            montantBaseVendu: '',
            coursBase: '',
            etatDateImport: '',
            isControlRow: false,
        }] : []),
        ...(selectedDeals2.length > 0 ? [{
            id: 'total-2',
            type: 'Total 2',
            reference: '',
            contrepartie: '',
            dateValeur: '',
            montantAchat: calculateTotal2()?.montantAchat.toFixed(2) || '0.00',
            montantVendu: calculateTotal2()?.montantVendu.toFixed(2) || '0.00',
            coursClient: '',
            montantBaseAchat: calculateTotal2()?.montantBaseAchat.toFixed(2) || '0.00',
            montantBaseVendu: calculateTotal2()?.montantBaseVendu.toFixed(2) || '0.00',
            coursBase: '',
            etatDateImport: '',
            isTotalRow: true,
            isControlRow: false,
        }] : [])
    ];

    const ControlsRowCell = (params) => {
        const [localDropdown, setLocalDropdown] = useState('[Sélectionner un justificatif]');
        const [localValue, setLocalValue] = useState('');
        const textareaRef = useRef();
        useEffect(() => { if (textareaRef.current) textareaRef.current.focus(); }, []);
        if (!params.data.isControlRow) return params.value;

        const effacerMatch = () => {
            setSelectedDeal1(null);
            setSelectedDeals2([]);
        };
        const createMatch = () => {
            if (!selectedDeal1 || selectedDeals2.length === 0) {
                alert("Veuillez sélectionner au moins un deal '1' et un deal '2' pour le matching.");
                return;
            }
            if (window.confirm("Voulez-vous creer un 'matching' manuel pour les deals sélectionnés ?")) {
                // Matching logic here
            }
        };
        const isCreateEnabled = localDropdown !== '[Sélectionner un justificatif]' && localValue.trim() !== '';
        return (
            <div style={{
                display: 'flex',
                alignItems: 'flex-start',
                gap: 24,
                background: '#f8f9fa',
                padding: '20px 16px',
                borderRadius: 6,
                border: '1px solid #e0e0e0',
                margin: 0,
                width: '100%'
            }}>
                <div style={{ minWidth: 350, flex: 2 }}>
                    <div className="d-flex gap-2 justify-content-end mt-2">
                        <button
                            className="btn btn-danger btn-sm"
                            type="button"
                            onClick={createMatch}
                            disabled={!isCreateEnabled}
                        >
                            Créer Matching
                        </button>
                        <button
                            className="btn btn-secondary btn-sm"
                            type="button"
                            onClick={() => {
                                setLocalValue('');
                                setLocalDropdown('[Sélectionner un justificatif]');
                                effacerMatch();
                            }}
                        >
                            Effacer la sélection
                        </button>
                    </div>
                </div>
            </div>
        );
    };

    const topGridColumnDefs = [
        {
            headerName: '',
            field: 'radioButtons',
            minWidth: 60,
            flex: 0.3,
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                
                const isFirstRow = params.data.id === 'slot1' || params.data.id === 'placeholder-1';
                const isSecondRow = params.data.id.startsWith('slot2-') || params.data.id === 'placeholder-2';
                
                if (!isFirstRow && !isSecondRow) return null;
                
                const number = isFirstRow ? '1' : '2';
                return (
                    <label
                        className="custom-radio-numbered"
                        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', height: '100%', cursor: 'pointer' }}
                    >
                        <input
                            type="radio"
                            name="top-radio"
                            value={number}
                            checked
                            readOnly
                            style={{ display: 'none' }}
                        />
                        <span className="custom-radio-circle">{number}</span>
                    </label>
                );
            },
        },
        {
            headerName: 'Type',
            field: 'type',
            minWidth: 100,
            flex: 1,
            cellRenderer: (params) => {
                if (params.data.isControlRow) return ControlsRowCell(params);
                if (params.data.isTotalRow) {
                    return <span style={{ fontWeight: 'bold', color: '#155724' }}>{params.value}</span>;
                }
                const parts = (params.data.type || '').split(' ');
                return <span>{parts[0] || ''}</span>;
            },
            colSpan: params => params.data.isControlRow ? 12 : 1
        },
        {
            headerName: 'Office',
            field: 'office',
            minWidth: 100,
            flex: 1,
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                const parts = (params.data.type || '').split(' ');
                return <span>{parts.slice(1).join(' ')}</span>;
            }
        },
        { 
            headerName: 'Reference', 
            field: 'reference', 
            minWidth: 100, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                return <span>{params.value}</span>;
            }
        },
        { 
            headerName: 'Contrepartie', 
            field: 'contrepartie', 
            minWidth: 120, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                return <span>{params.value}</span>;
            }
        },
        { 
            headerName: 'Date de Valeur', 
            field: 'dateValeur', 
            minWidth: 100, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                return <span>{params.value}</span>;
            }
        },
        // Montant Achat split in top grid
        { headerName: 'Montant Achat', field: 'montantAchatAmount', minWidth: 100, flex: 1, cellRenderer: (params) => { if (params.data.isControlRow) return null; if (params.data.isTotalRow) return <span style={{ fontWeight: 'bold', color: '#155724' }}>{params.data.montantAchat}</span>; const { amount } = parseAmountParts(params.data.montantAchat); return <span>{amount}</span>; } },
        { headerName: '', field: 'montantAchatCurrency', minWidth: 80, flex: 0.6, cellRenderer: (params) => { if (params.data.isControlRow || params.data.isTotalRow) return null; const { currency } = parseAmountParts(params.data.montantAchat); return <span>{currency}</span>; } },
        { headerName: '', field: 'montantAchatN', minWidth: 50, flex: 0.3, cellRenderer: (params) => { if (params.data.isControlRow || params.data.isTotalRow) return null; const { n } = parseAmountParts(params.data.montantAchat); return <span>{n}</span>; } },
        // Montant Vendu split in top grid
        { headerName: 'Montant Vendu', field: 'montantVenduAmount', minWidth: 100, flex: 1, cellRenderer: (params) => { if (params.data.isControlRow) return null; if (params.data.isTotalRow) return <span style={{ fontWeight: 'bold', color: '#155724' }}>{params.data.montantVendu}</span>; const { amount } = parseAmountParts(params.data.montantVendu); return <span>{amount}</span>; } },
        { headerName: '', field: 'montantVenduCurrency', minWidth: 80, flex: 0.6, cellRenderer: (params) => { if (params.data.isControlRow || params.data.isTotalRow) return null; const { currency } = parseAmountParts(params.data.montantVendu); return <span>{currency}</span>; } },
        { headerName: '', field: 'montantVenduN', minWidth: 50, flex: 0.3, cellRenderer: (params) => { if (params.data.isControlRow || params.data.isTotalRow) return null; const { n } = parseAmountParts(params.data.montantVendu); return <span>{n}</span>; } },
        { 
            headerName: 'Cours client', 
            field: 'coursClient', 
            minWidth: 100, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                return <span>{params.value}</span>;
            }
        },
        { 
            headerName: 'Montant de base Achat', 
            field: 'montantBaseAchat', 
            minWidth: 100, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) {
                    return <span style={{ fontWeight: 'bold', color: '#155724' }}>{params.value}</span>;
                }
                return <span>{params.value}</span>;
            }
        },
        { 
            headerName: 'Montant de base Vendu', 
            field: 'montantBaseVendu', 
            minWidth: 100, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) {
                    return <span style={{ fontWeight: 'bold', color: '#155724' }}>{params.value}</span>;
                }
                return <span>{params.value}</span>;
            }
        },
        { 
            headerName: 'Cours base', 
            field: 'coursBase', 
            minWidth: 100, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                return <span>{params.value}</span>;
            }
        },
        { 
            headerName: "Date d'import", 
            field: 'etatDateImport', 
            minWidth: 100, 
            flex: 1, 
            cellRenderer: (params) => {
                if (params.data.isControlRow) return null;
                if (params.data.isTotalRow) return null;
                return <span>{params.value}</span>;
            }
        },
    ];

    return (
        <>
            <Container fluid className="mt-3 mb-4">
            <Stack direction="horizontal" gap={3} className="mb-2 pb-2 border-bottom align-items-center justify-content-between flex-wrap">
                <div className="d-flex align-items-center gap-2 mb-1 mb-md-0">
                    <OverlayTrigger
                        trigger={['hover', 'focus']}
                        placement="bottom"
                        overlay={popover}
                    >
                        <QuestionCircleFill className="help-cursor" />
                    </OverlayTrigger>
                    <span>Légende</span>
                </div>
                </Stack>
                <div className="ag-theme-alpine grid-container" style={{ 
                    width: '100%', 
                    minWidth: 0, 
                    height: `${Math.max(120, (2 + selectedDeals2.length + (selectedDeals2.length > 0 ? 1 : 0)) * 40)}px` 
                }}>
                    <AgGridReact
                        rowData={topGridRows}
                        columnDefs={topGridColumnDefs}
                        defaultColDef={defaultColDef}
                        headerHeight={38}
                        rowHeight={40}
                        suppressMovableColumns={true}
                        suppressMenuHide={true}
                        suppressCellFocus={true}
                        theme={'legacy'}
                        enableCellTextSelection={true}
                        suppressHorizontalScroll={true}
                        suppressColumnVirtualisation={true}
                        suppressRowVirtualisation={true}
                    />
                </div>
                <div style={{marginTop: 0, marginBottom: 12}}>
                  <ControlsRowCell data={{isControlRow:true}} />
                </div>
            <p className="text-muted mb-2">Nombre de deals: {totalDeals}</p>
            {loading ? (
                <div className="text-center my-5">Chargement des données...</div>
            ) : (
                    <div className="ag-theme-alpine grid-container" style={{ width: '100%', height: '390px' }}>
                <AgGridReact
                    ref={gridRef}
                    rowData={expandedDealsData}
                    columnDefs={columnDefs}
                    defaultColDef={defaultColDef}
                    autoGroupColumnDef={autoGroupColumnDef}
                    pagination={true}
                    paginationPageSize={10}
                    enableBrowserTooltips={true}
                    rowSelection="single"
                    rowHeight={50}
                    theme={'legacy'}
                    gridOptions={gridOptions}
                    suppressHorizontalScroll={true}
                    suppressColumnVirtualisation={true}
                    suppressRowVirtualisation={true}
                />
            </div>
            )}
        </Container>
        </>
    );
};

export default DealsTable;
