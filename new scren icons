 {
            headerName: 'Type',
            field: 'type',
            rowSpan: (params) => (params.node.rowIndex % 2 === 0 ? 2 : 1),
            cellRenderer: (params) => {
                if (params.node.rowIndex % 2 !== 0) return '';
                const parts = (params.value || '').split(' ');
                const typeCode = parts[0] || '';
                return (
                    <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',   // ✅ add this
                        height: '100%',
                        width: '100%',               // ✅ ensures full width coverage
                        textAlign: 'center'          // ✅ fallback for text
                    }}>
                        <span>{typeCode}</span>
                    </div>
                );
            },
            
            cellClassRules: {
                'cell-span': (params) => params.node.rowIndex % 2 === 0,
            },
            maxWidth: 100,
            cellClass: 'd-flex align-items-center',
            cellStyle: { display: 'flex', alignItems: 'center' },
        },
